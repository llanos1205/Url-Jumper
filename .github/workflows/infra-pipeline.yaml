# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Infrastructure

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      - infra/templates/**
      - .github/workflows/infra-pipeline.yml
  pull_request:
    branches: ["main"]
    paths:
      - infra/templates/**
      - .github/workflows/infra-pipeline.yml

jobs:
  plan-dev:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials Action For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
      - name: tf init
        run: terraform init  -reconfigure --backend-config=key='url_jumper/dev.tfstate' --backend-config="profile=default"
        working-directory: ./infra/terraform

      - name: tf validate
        run: terraform validate
        working-directory: ./infra/terraform
      - name: tf plan dev
        run: terraform plan  -var-file=./envs/dev.tfvars
        working-directory: ./infra/terraform

  apply-dev:
    needs: plan-dev
    environment: dev
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials Action For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
      - name: tf init
        run: terraform init  -reconfigure  --backend-config=key='url_jumper/dev.tfstate' --backend-config="profile=default"
        working-directory: ./infra/terraform
      - name: tf apply dev
        run: terraform apply  -var-file=./envs/dev.tfvars --auto-approve
        working-directory: ./infra/terraform
