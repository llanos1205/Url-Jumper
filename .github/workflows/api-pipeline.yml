name: API CI

on:
  push:
    branches: ["main"]
    paths:
      - api/**
      - .github/workflows/api-pipeline.yml
  pull_request:
    branches: ["main"]
    paths:
      - api/**
      - .github/workflows/api-pipeline.yml

jobs:
  build:
    runs-on: ubuntu-latest
    environment: "dev"
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials Action For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        working-directory: ./api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        env:
          DJANGO_ENVIRONMENT: "dev"
        working-directory: ./api
        run: |
          python manage.py test --keepdb

  package:
    needs: build
    runs-on: ubuntu-latest
    environment: "dev"
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v1

      - uses: docker/login-action@v1
        with:
          username: llanos1205
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/build-push-action@v2
        with:
          context: ./api
          push: true
          file: ./api/DockerFile
          tags: llanos1205/url-jumper:latest

  deploy-dev:
    needs: package
    runs-on: ubuntu-latest
    environment: "dev"
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]
    steps:
      - name: Configure AWS Credentials Action For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: push to s3
        run: aws s3 cp api/Dockerrun.aws.json ${{vars.API_BUCKET}}/dev/Dockerrun.aws.json

      - name: push to s3
        run: aws elasticbeanstalk create-application-version --application-name ${{ vars.EBSK_APPLICATION }} --version-label $APP_VERSION --source-bundle S3Bucket=${{vars.API_BUCKET}},S3Key=dev/Dockerrun.aws.json

      - name: push to s3
        run: aws elasticbeanstalk update-environment --application-name ${{ vars.EBSK_APPLICATION }} --environment-name ${{ vars.EBSK_APPLICATION_ENV }} --version-label=$APP_VERSION

  deploy-prod:
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment: "prod"
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]
    steps:
      - name: Configure AWS Credentials Action For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: push to s3
        run: aws s3 cp api/Dockerrun.aws.json ${{vars.API_BUCKET}}/dev/Dockerrun.aws.json

      - name: push to s3
        run: aws elasticbeanstalk create-application-version --application-name ${{ vars.EBSK_APPLICATION }} --version-label $APP_VERSION --source-bundle S3Bucket=${{vars.API_BUCKET}},S3Key=dev/Dockerrun.aws.json

      - name: push to s3
        run: aws elasticbeanstalk update-environment --application-name ${{ vars.EBSK_APPLICATION }} --environment-name ${{ vars.EBSK_APPLICATION_ENV }} --version-label=$APP_VERSION
